// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../../prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Lang {
  en
  fr
  de
  es
}

model User {
  id              String  @unique @db.Uuid
  lang            Lang    @default(fr)
  name            String  @unique @db.VarChar(255)
  admin           Boolean @default(false)
  connexionToken  String  @db.Uuid
  bruteLimit      Int     @default(3)
  sacrificePoints Int     @default(0)
  brutes          Brute[]
}

enum DestinyChoiceSide {
  LEFT  @map("0")
  RIGHT @map("1")
}

enum Gender {
  male
  female
}

model BruteBody {
  id            Int   @id @default(autoincrement())
  brute         Brute @relation(fields: [bruteId], references: [id])
  bruteId       Int   @unique
  longHair      Int
  lowerRightArm Int
  rightHand     Int
  upperRightArm Int
  rightShoulder Int
  rightFoot     Int
  lowerRightLeg Int
  upperRightLeg Int
  leftFoot      Int
  lowerLeftLeg  Int
  pelvis        Int
  upperLeftLeg  Int
  tummy         Int
  torso         Int
  head          Int
  leftHand      Int
  upperLeftArm  Int
  lowerLeftArm  Int
  leftShoulder  Int
}

model BruteColors {
  id             Int    @id @default(autoincrement())
  brute          Brute  @relation(fields: [bruteId], references: [id])
  bruteId        Int    @unique
  skinColor      String @db.VarChar(255)
  skinShade      String @db.VarChar(255)
  hairColor      String @db.VarChar(255)
  hairShade      String @db.VarChar(255)
  primaryColor   String @db.VarChar(255)
  primaryShade   String @db.VarChar(255)
  secondaryColor String @db.VarChar(255)
  secondaryShade String @db.VarChar(255)
  accentColor    String @db.VarChar(255)
  accentShade    String @db.VarChar(255)
}

enum WeaponName {
  fan
  keyboard
  knife
  leek
  mug
  sai
  racquet
  axe
  bumps
  flail
  fryingPan
  hatchet
  mammothBone
  morningStar
  trombone
  baton
  halbard
  lance
  trident
  whip
  noodleBowl
  piopio
  shuriken
  broadsword
  scimitar
  sword
}

enum SkillName {
  herculeanStrength
  felineAgility
  lightningBolt
  vitality
  immortality
  reconnaissance
  weaponsMaster
  martialArts
  sixthSense
  hostility
  fistsOfFury
  shield
  armor
  toughenedSkin
  untouchable
  sabotage
  shock
  bodybuilder
  relentless
  survival
  leadSkeleton
  balletShoes
  determination
  firstStrike
  resistant
  counterAttack
  ironHead
  thief
  fierceBrute
  tragicPotion
  net
  bomb
  hammer
  cryOfTheDamned
  hypnosis
  flashFlood
  tamer
  regeneration
  chef
  spy
  saboteur
  backup
  hideaway
  monk
}

enum PetName {
  dog1
  dog2
  dog3
  panther
  bear
}

model Brute {
  id                           Int                 @id @default(autoincrement())
  name                         String              @db.VarChar(255)
  deletedAt                    DateTime?           @db.Timestamptz()
  createdAt                    DateTime            @default(now()) @db.Timestamptz()
  destinyPath                  DestinyChoiceSide[] @default([])
  level                        Int                 @default(1)
  xp                           Int                 @default(0)
  hp                           Int                 @default(0)
  enduranceStat                Int                 @default(0)
  enduranceModifier            Float               @default(1)
  enduranceValue               Int                 @default(0)
  strengthStat                 Int                 @default(0)
  strengthModifier             Float               @default(1)
  strengthValue                Int                 @default(0)
  agilityStat                  Int                 @default(0)
  agilityModifier              Float               @default(1)
  agilityValue                 Int                 @default(0)
  speedStat                    Int                 @default(0)
  speedModifier                Float               @default(1)
  speedValue                   Int                 @default(0)
  ranking                      Int                 @default(11)
  gender                       Gender
  user                         User?               @relation(fields: [userId], references: [id])
  userId                       String?             @db.Uuid
  body                         BruteBody?
  colors                       BruteColors?
  weapons                      WeaponName[]        @default([])
  skills                       SkillName[]         @default([])
  pets                         PetName[]           @default([])
  master                       Brute?              @relation("Master", fields: [masterId], references: [id])
  masterId                     Int?
  pupils                       Brute[]             @relation("Master")
  pupilsCount                  Int                 @default(0)
  clan                         Clan?               @relation(fields: [clanId], references: [id])
  clanId                       Int?
  registeredForTournament      Boolean             @default(false)
  nextTournamentDate           DateTime?           @db.Date
  currentTournamentDate        DateTime?           @db.Date
  currentTournamentStepWatched Int?                @default(0)
  lastFight                    DateTime?           @db.Date
  fightsLeft                   Int                 @default(6)
  victories                    Int                 @default(0)
  fights                       Fight[]
  fightsAsAdversary            Fight[]             @relation("Adversary")
  logs                         Log[]
  destinyChoices               DestinyChoice[]
  spritesheet                  BruteSpritesheet?
  tournaments                  Tournament[]
  opponents                    Brute[]             @relation("Opponents")
  opponentOf                   Brute[]             @relation("Opponents")
  opponentsGeneratedAt         DateTime?           @db.Date
  canRankUpSince               DateTime?           @db.Date
}

model BruteSpritesheet {
  id      Int    @id @default(autoincrement())
  brute   Brute  @relation(fields: [bruteId], references: [id])
  bruteId Int    @unique
  image   Bytes? @db.ByteA
  json    Json?  @db.Json
}

model Clan {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(255)
  brutes Brute[]
}

enum LogType {
  win
  lose
  child
  childup
  up
  lvl
  survive
  tournament
  tournamentXp
}

enum FighterType {
  brute
  pet
}

model Fight {
  id             Int              @id @default(autoincrement())
  date           DateTime         @default(now()) @db.Date
  brute1         Brute            @relation(fields: [brute1Id], references: [id])
  brute1Id       Int
  brute2         Brute            @relation("Adversary", fields: [brute2Id], references: [id])
  brute2Id       Int
  winner         String           @db.VarChar(255)
  loser          String           @db.VarChar(255)
  steps          Json             @db.Json
  fighters       Json             @db.Json
  logs           Log[]
  TournamentStep TournamentStep[]
}

model Log {
  id             Int      @id @default(autoincrement())
  date           DateTime @default(now()) @db.Date
  currentBrute   Brute    @relation(fields: [currentBruteId], references: [id])
  currentBruteId Int
  type           LogType
  level          Int?
  brute          String?  @db.VarChar(255)
  fight          Fight?   @relation(fields: [fightId], references: [id])
  fightId        Int?
  xp             Int?
}

enum DestinyChoiceType {
  skill
  weapon
  pet
  stats
}

enum BruteStat {
  endurance
  strength
  agility
  speed
}

model DestinyChoice {
  id         Int                 @id @default(autoincrement())
  brute      Brute               @relation(fields: [bruteId], references: [id])
  bruteId    Int
  path       DestinyChoiceSide[]
  type       DestinyChoiceType
  skill      SkillName?
  weapon     WeaponName?
  pet        PetName?
  stat1      BruteStat?
  stat1Value Int?
  stat2      BruteStat?
  stat2Value Int?
}

enum TournamentType {
  DAILY
  GLOBAL
  CUSTOM
}

model Tournament {
  id           Int              @id @default(autoincrement())
  date         DateTime         @db.Date
  type         TournamentType   @default(DAILY)
  participants Brute[]
  steps        TournamentStep[]
}

model TournamentStep {
  id            Int        @id @default(autoincrement())
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  Int
  step          Int
  fight         Fight      @relation(fields: [fightId], references: [id])
  fightId       Int
  xpDistributed Boolean    @default(false)
}
